points = [[50, 50], [200, 50], [300, 100], [350, 250], [250, 350], [100, 300], [50, 150], [50, 50]]
points = c([50, 50], [200, 50], [300, 100], [350, 250], [250, 350], [100, 300], [50, 150], [50, 50])
points = c(c(50, 50), c(200, 50), c(300, 100), c(350, 250), c(250, 350), c(100, 300), c(50, 150))
data(cardiff)
##load packages
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
##First create dummy dataset
SiteName=c("Site 1", "Site 2", "Site 3", "Site 4", "Site 5")
Latitude=c("-16.40407","-16.41253","-16.39207","-16.40035","-16.40457")
Longitude=c("145.8157","145.7117","145.8308","145.8368","145.8405")
Poly=data.frame(SiteName,Latitude, Longitude)
Poly$Latitude=as.numeric(as.character(Poly$Latitude))
Poly$Longitude=as.numeric(as.character(Poly$Longitude))
Site1=data.frame(SiteName="Site 1",value=1:10)
Site2=data.frame(SiteName="Site 2",value=1:3)
Site3=data.frame(SiteName="Site 3",value=1:64)
Site4=data.frame(SiteName="Site 4",value=1:13)
Site5=data.frame(SiteName="Site 5",value=1:18)
Site1x=data.frame(SiteName="Site 1",value=1:30)
df=dplyr::bind_rows(Site1,Site2,Site3,Site4,Site5,Site1x)
df=df[order(df$SiteName),]
rownames(df) <- 1:nrow(df)
### Preparing the SpatialPointsDataFrame
spdf <- matrix(as.numeric(NA), nlevels(Poly.buffer$SiteName), 1)
##Create Poly.buffer##
coordinates(Poly)=~Longitude+Latitude
proj4string(Poly)=CRS("+proj=longlat +datum=WGS84")
Poly.utm <- spTransform(Poly, CRS("+proj=utm +zone=55 +south +units=m
+ellps=WGS84"))
Poly.buffer=gBuffer(Poly.utm,width=400,byid=TRUE)
Poly.buffer=spTransform(Poly.buffer, CRS("+proj=longlat +datum=WGS84"))
### Preparing the SpatialPointsDataFrame
spdf <- matrix(as.numeric(NA), nlevels(Poly.buffer$SiteName), 1)
spdf <- as.list(spdf)
### Sample the coordinate, match it with data in spdf.
### sample(spsample()) fix the size of the sample
for (i in seq(Poly.buffer$SiteName))
spdf[i] <- SpatialPointsDataFrame(
sample(spsample(Poly.buffer[order(Poly.buffer$SiteName)==i,], n = 200, "random"),
table(df$SiteName)[[i]]),
df[df$SiteName==dimnames(table(df$SiteName))[[1]][i],],
proj4string=poly.crs,
match.ID=FALSE)
### Sample the coordinate, match it with data in spdf.
### sample(spsample()) fix the size of the sample
for (i in seq(Poly.buffer$SiteName))
spdf[i] <- SpatialPointsDataFrame(
sample(spsample(Poly.buffer[order(Poly.buffer$SiteName)==i,], n = 200, "random"),
table(df$SiteName)[[i]]),
df[df$SiteName==dimnames(table(df$SiteName))[[1]][i],],
match.ID=FALSE)
## Merging together the list to make on SpatialDataFrame
do.call("rbind", spdf) -> spdf
df.spdf=as.data.frame(spdf)
fPoly.buffer=fortify(Poly.buffer)
ggplot(data=df.spdf, aes(x=x,y=y)) +  geom_polygon(data=fPoly.buffer,
aes(long, lat, group = group)) + geom_point(size=0.1,aes(color=SiteName))
View(df)
class(Latitude)
View(Poly)
download.file("http://sdm.dev-lab.net/geomorphic.csv",
destfile = "geomorphic.csv", mode = "wb")
geomorphic <- read.table("geomorphic.csv", sep = ',', header = T)
View(geomorphic)
